{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","className","src","imageSrc","alt","name","address","city","state","zipCode","category","toUpperCase","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","sortByOptions","SearchBar","term","location","sortBy","handleTermChange","bind","handleLocationChange","handleSearch","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","sortByOptionValue","onClick","handleSortByChange","getSortByClass","renderSortByOptions","placeholder","onChange","yelp","yelpSearch","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zipcode","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f399cd7.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\nclass Business extends React.Component {\n  render() {\n    const { business } = this.props;\n    return (\n  <div className=\"Business\">\n  <div className=\"image-container\">\n    <img src={business.imageSrc} alt=''/>\n  </div>\n  <h2>{business.name}</h2>\n  <div className=\"Business-information\">\n    <div className=\"Business-address\">\n      <p>{business.address}</p>\n      <p>{business.city}</p>\n      <p>{business.state} {business.zipCode} </p>\n    </div>\n    <div className=\"Business-reviews\">\n      <h3>{business.category.toUpperCase()}</h3>\n      <h3 className=\"rating\">{business.rating} stars</h3>\n      <p>{business.reviewCount} reviews</p>\n    </div>\n  </div>\n</div>\n)\n  }\n}\n\nexport default Business\n","import React from 'react';\nimport './BusinessList.css';\n\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n  render() {\n    return (\n      <div className=\"BusinessList\">\n        {\n          this.props.businesses.map(business => {\n            return <Business key={business.id} business={business} />\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default BusinessList;\n","import React from 'react';\nimport './SearchBar.css';\n\nconst sortByOptions = {\n  'Best Match' : 'best_match',\n  'Highest Rating' : 'rating',\n  'Most Reviewed' : 'review_count'\n};\n\nclass SearchBar extends React.Component {\n\n  constructor(props){\n  super(props);\n  this.state = {\n    term : '',\n    location : '',\n    sortBy : 'best_match'\n  };\n  this.handleTermChange     = this.handleTermChange.bind(this)\n  this.handleLocationChange = this.handleLocationChange.bind(this)\n  this.handleSearch         = this.handleSearch.bind(this)\n}\n\ngetSortByClass(sortByOption) {\n  if (this.state.sortBy === sortByOption) {\n    return 'active';\n  }\n  return '';\n}\n\n\n  handleSortByChange(sortByOption) {\n    this.setState({sortBy : sortByOption });\n  }\n\n  handleTermChange(event) {\n    this.setState({term: event.target.value})\n  }\n\n  handleLocationChange(event){\n    this.setState({location: event.target.value})\n  }\n\n  handleSearch(event){\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy)\n    event.preventDefault()\n  }\n\n  renderSortByOptions() {\n      return Object.keys(sortByOptions).map(sortByOption => {\n              let sortByOptionValue = sortByOptions[sortByOption];\n              return ( <li onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\n               className={this.getSortByClass(sortByOptionValue)}\n                key={sortByOptionValue} >{sortByOption}</li> )\n            }\n    );\n  }\n\n  render() {\n    return (\n  <div className=\"SearchBar\">\n  <div className=\"SearchBar-sort-options\">\n    <ul>\n      {this.renderSortByOptions()}\n    </ul>\n  </div>\n  <div className=\"SearchBar-fields\">\n    <input placeholder=\"Search Businesses\" onChange = {this.handleTermChange} />\n    <input placeholder=\"Where?\" onChange = {this.handleLocationChange} />\n  </div>\n  <div className=\"SearchBar-submit\">\n    <a onClick= {this.handleSearch}>Let's Go</a>\n  </div>\n</div>\n)\n  }\n}\n\nexport default SearchBar\n","\nconst apiKey = 'caLgw9LX6H0J2Xs_U6Yki_y2gMIC7Ra6-JL1bdNiOPr4rzDIJ4kxsSgt_t21Mn5M9rpvb3Gvqr12IFbPDsHxlPC-57ryqFgBKwV6nqXxgonlANB4Nx1idX5SmCFgXnYx'\n\nconst yelp = {\n  yelpSearch(term, location, sortBy) {\n    return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`,\n                  {headers: {\n                    Authorization: `Bearer ${apiKey}`\n                  }\n                }).then(response => {\n                  return response.json()\n\n                }).then(jsonResponse => {\n                  if (jsonResponse.businesses) {\n                    return jsonResponse.businesses.map(business => {\n                      return {\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipcode: business.location.zip_code,\n                        category: business.categories[0].title,\n                        rating: business.rating,\n                        reviewCount: business.review_count\n                      }\n                    })\n                  }\n                })\n  }\n}\nexport default yelp;\n","import React from 'react';\nimport './App.css';\n\nimport BusinessList from '../BusinessList/BusinessList'\nimport SearchBar    from  '../SearchBar/SearchBar'\nimport yelp from '../../util/Yelp.js'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      businesses: [ ]\n    };\n    this.searchYelp = this.searchYelp.bind(this)\n  }\n\n  searchYelp(term, location, sortBy){\n    yelp.yelpSearch(term, location, sortBy).then(businesses => {\n      this.setState({businesses: businesses})\n    })\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n    <h1>Marcie Eats</h1>\n    <SearchBar searchYelp = {this.searchYelp}/>\n    <BusinessList businesses={this.state.businesses}/>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}